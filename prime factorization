ll spf[M];

void sieve()
{
    spf[1] = 1;
    for(ll i = 2 ; i<M ; ++i)
    {
        if(!spf[i])
        {
            spf[i] = i;
            for(ll j=i*i ; j<M ; j+=i)
            {
                if(!spf[j]) spf[j] = i;
            }
        }
    }
}



void solve()
{
    int n=16;
    while(spf[n]>1)
    {
        cout<<spf[n]<<" ";
        n/=spf[n];
    }
}




//with primes number (nlogn)
int spf[N];
vector<int> primes;
void sieve() {
  for(int i = 2; i < N; i++) {
    if (spf[i] == 0) spf[i] = i, primes.push_back(i);
    int sz = primes.size();
    for (int j = 0; j < sz && i * primes[j] < N && primes[j] <= spf[i]; j++) {
      spf[i * primes[j]] = primes[j];
    }
  }
}
