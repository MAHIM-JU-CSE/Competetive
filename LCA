#include<iostream>
#include<algorithm>
#include<vector>
#include<math.h>

using namespace std;

int dp[10005][25];
int level[10005];


int LCA(int u, int v)
{
    if(level[u]<level[v])swap(u,v);
    int dif=level[u]-level[v];
    for(int i=0;i<=20;i++)
    {
        if((1<<i)&dif)
        {
            u=dp[u][i];
        }
    }
    if(u==v)
        return u;
        
    for(int i=20;i>=0;i--)
    {
        if(dp[u][i]==-1 || dp[v][i]==-1)continue;
        if(dp[u][i]!=dp[v][i])
        {
            u=dp[u][i];
            v=dp[v][i];
        }
    }
    return dp[u][0];
}

void add(int child, int parent)
{
    level[child]+=level[parent]+1;
    dp[child][0]=parent;
    for(int i=1;i<=20;i++)
    {
        if(dp[dp[child][i-1]][i-1]==-1)break;
        dp[child][i]=dp[dp[child][i-1]][i-1];
    }
}


void solve(int i)
{
    int n;
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        int sz;
        cin>>sz;
        while(sz--)
        {
            int child;
            cin>>child;
            add(child,i);
        }
    }
    int q;
    cin>>q;
    vector<int>vec;
    while(q--)
    {
        int u,v;
        cin>>u>>v;
        int ans=LCA(u,v);
        vec.push_back(ans);
    }
    cout<<"Case "<<i<<":"<<endl;

    for(auto x:vec)
        cout<<x<<endl;
}

int main()
{
    int t,i=1;
    cin>>t;
    while(t--)
    {
        for(int i=0;i<=1000;i++)
        {
            level[i]=0;
            for(int j=0;j<25;j++)
            {
                dp[i][j]=-1;
            }
        }
        solve(i);
        i++;
    }
}
