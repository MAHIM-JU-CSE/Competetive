#define mxx 200010
ll arr[mxx];
ll tr[mxx*4];

void Build(ll node, ll b, ll e)
{
    if (b == e) {
        tr[node] = arr[b];
        return;
    }
    ll Left = node * 2;
    ll Right = node * 2 + 1;
    ll mid = (b + e) / 2;
    Build(Left, b, mid);
    Build(Right, mid + 1, e);
    tr[node] = min(tr[Left] , tr[Right]);
}

void Update(ll node, ll b, ll e, ll i, ll newvalue)
{
    if (i > e || i < b)
        return;
    if (b >= i && e <= i) {
        tr[node] = newvalue;
        return;
    }
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    Update(Left, b, mid, i, newvalue);
    Update(Right, mid + 1, e, i, newvalue);
    tr[node] = tr[Left] + tr[Right];
}

ll Query(ll node, ll b, ll e, ll i, ll j)
{
    if (i > e || j < b)
        return 0;
    if (b >= i && e <= j)
        return tr[node];
    ll Left = node * 2;
    ll Right = node * 2 + 1;
    ll mid = (b + e) / 2;
    ll p1 = Query(Left, b, mid, i, j);
    ll p2 = Query(Right, mid + 1, e, i, j);
    return  min(p1, p2);
}
int main()
{
    Build(1, 1, n);
    Update(1, 1, n, 2, 5);
    int x=Query(1, 1, n, 1, 3);
    return 0;
}