/*
---------------------------------------------------
    Author : Mahim
    From   : CSE, JU, Batch:47
    Date   : 28.12.2021
---------------------------------------------------
*/
#include <bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define MAX 1e18
#define MIN -1e18
#define pb push_back
#define pii pair<int, int>
#define pll pair<long long int, long long int>
#define vi vector<int>
#define vll vector<long long>
#define memset(array, value) memset(array, value, sizeof(array))
#define endl "\n"
#define LCM(a, b) a *b / __gcd(a, b)
#define GCD(a, b) __gcd(a, b)
#define Sort(name) sort(name.begin(), name.end())
#define sorT(name) sort(name.rbegin(), name.rend())
#define Reverse(name) reverse(name.begin(), name.end())
const long long mod  = 1e9 + 7;
const double pi = acos(-1.0);
using namespace std;
#define fio                           \
    ios_base::sync_with_stdio(false); \
    cin.tie(0);                       \
    cout.tie(0)

#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
template<typename temp>using ordered_set = tree<temp, null_type, less_equal<temp>, rb_tree_tag, tree_order_statistics_node_update>;
//order_of_key(k)  : Number of items strictly smaller than k .
//find_by_order(k) : K-th element in a set (counting from zero).//*(ost.find_by_order(k))

/*
ll fact(ll n)
{
    ll res = 1;
    for (ll i = 2; i <= n; i++)res = (res * i) % mod;
    return res;
}

ll nPr[1005][1005];
ll nCr[1005][1005];
void findnpr()
{
    for (ll i = 0; i < 1005; i++)
    {
        nPr[i][0] = 1;
    }
    for (ll i = 1; i < 1005; i++)
        for (int j = 1; j < 1005; j++)
            nPr[i][j] = i * nPr[i - 1][j - 1] % mod;
}
void findncr()
{
    for (ll i = 0; i < 1005; i++)
    {
        nCr[i][0] = 1;
        nCr[i][i] = 1;
    }
    for (ll i = 1; i < 1005; i++)
        for (ll j = 1; j < 1005; j++)if (i != j)
            {
                nCr[i][j] = (nCr[i - 1][j] + nCr[i - 1][j - 1]) % mod;
            }
}
string bin(ll n)
{
    string s = "";
    while (n != 0)
    {
        if (n % 2 == 0)s.pb('0');
        else s.pb('1');
        n /= 2;
    }
    Reverse(s);
    return s;
}
ll sieve(ll n)
{
    bool check[n + 1];
    memset(check, true);
    ll ans=0;
    for (ll i = 2; i * i <= n; i++)if (check[i] == true)
            for (ll j = i * i; j <= n; j += i)
                check[j] = false;
    for (ll i = 2; i <= n; i++)
    {
        if (check[i] == true)
        {
            ans++;
        }
    }
    return ans;
}
bool isprime(ll n)
{
    if (n <= 1)return false;
    if (n <= 3)return true;
    if (n % 2 == 0 || n % 3 == 0)return false;
    for (ll i = 5; i * i <= n; i = i + 6)
        if (n % i == 0 || n % (i + 2) == 0)return false;
    return true;
}
ll big_mod(ll a, ll b, ll c)
{
    if (b == 0)return 1 % c;
    ll x = big_mod(a, b / 2, c);
    x = (x * x) % c;
    if (b % 2 == 1)x = (x * a) % c;
    return x;
}
ll mod_inverse(ll a, ll m)
{
    return big_mod(a, m - 2, m);
}

vector<int> graph[100005];
bool visited[100005];
void dfs(int source)
{
    visited[source] = 1;
    for (auto x : graph[source])
    {
        if (visited[x] == 0)
            dfs(x);
    }
}
*/



//Careful about corner cases(n==1,n==n) and overflow (int vs ll)?


void solve()
{

}


int main()
{
    fio;
//#ifndef ONLINE_JUDGE
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
//#endif
    ll t;
    cin >> t;
    while (t--)
    {
        solve();
    }
    return 0;
}
